{"version":3,"sources":["components/clickCard/index.js","components/Wrapper/index.js","components/title/index.js","friendSorter.js","App.js","index.js"],"names":["ClickCard","props","react_default","a","createElement","className","id","onClick","alt","src","image","Wrapper","children","Title","name","score","highScore","shuffle","array","sort","Math","random","App","state","unchosenFriends","possibleFriends","clickCard","console","log","origFriendLength","_this","length","friendsRemaining","filter","friend","newFriendLength","currentHighScore","setState","alert","_this2","this","shuffledFriends","components_Wrapper","title","map","key","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"s7DAWeA,MAPf,SAAmBC,GACf,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OAAOC,GAAIL,EAAMK,GAAIC,QAAS,kBAAMN,EAAMM,QAAQN,EAAMK,MACrEJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWG,IAAI,aAAaC,IAAKR,EAAMS,iBCAnDC,MAJf,SAAiBV,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMW,kBCS1BC,MAVf,SAAeZ,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAMC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,UAAKH,EAAMa,MACXZ,EAAAC,EAAAC,cAAA,+GACAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,kBAAwCJ,EAAMc,OAC9Cb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,gBAA2CJ,EAAMe,qBCLxCC,MAJjB,SAAiBC,GACb,OAAOA,EAAMC,KAAK,kBAAMC,KAAKC,SAAW,MC0E7BC,6MAhEbC,MAAQ,CACNC,gBAAiBC,EACjBV,MAAM,EACNC,UAAW,KAGbU,UAAY,SAAApB,GACVqB,QAAQC,IAAItB,GACZ,IAAMuB,EAAmBC,EAAKP,MAAMC,gBAAgBO,OAC9CC,EAAmBF,EAAKP,MAAMC,gBAAgBS,OAAO,SAAAC,GAAM,OAAEA,EAAO5B,KAAOA,IAC3E6B,EAAkBH,EAAiBD,OACnCK,EAAmBN,EAAKP,MAAMP,UACpCW,QAAQC,IAAIC,EAAkBM,GAC1BN,IAAqBM,EACnBL,EAAKP,MAAMR,OAASqB,EAC1BN,EAAKO,SAAS,CACZb,gBAAiBQ,EACjBjB,MAAOe,EAAKP,MAAMR,MAAQ,EAC1BC,UAAYoB,EAAmB,IAGjCN,EAAKO,SAAS,CACZb,gBAAiBQ,EACjBjB,MAAOe,EAAKP,MAAMR,MAAQ,IAGpBc,IAAqBM,IAC7BG,MAAM,iBACNR,EAAKO,SAAS,CACZb,gBAAiBC,EACjBV,MAAO,8EAQF,IAAAwB,EAAAC,KACHC,EAAkBxB,EAAQQ,GAC9B,OACEvB,EAAAC,EAAAC,cAACsC,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAD,CAAO7B,KAAM,cAAcC,MAAOyB,KAAKjB,MAAMR,MAAOC,UAAawB,KAAKjB,MAAMP,WAA5E,eACCyB,EAAgBG,IAAI,SAAAV,GAAM,OACzBhC,EAAAC,EAAAC,cAACsB,EAAD,CAAWmB,IAAOX,EAAO5B,GAAIA,GAAI4B,EAAO5B,GAAIQ,KAAQoB,EAAOpB,KAAMJ,MAASwB,EAAOxB,MAAOH,QAAWgC,EAAKb,sBA9ChGoB,aCJlBC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.26a1eedd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nimport { tsPropertySignature } from \"@babel/types\";\r\n\r\nfunction ClickCard(props){\r\n    return(\r\n        <div className = \"card\" id={props.id} onClick={() => props.onClick(props.id)} >\r\n            <img className=\"card-img\" alt=\"card_image\" src={props.image}/>\r\n        </div>\r\n    )\r\n}\r\nexport default ClickCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props){\r\n    return(\r\n        <div  className=\"top-title\">\r\n        <h1>{props.name}</h1>\r\n        <p> Click on as many unique pictures as you can, the game ends when you click the same picture twice.</p>\r\n        <span className=\"score\">Current score: {props.score}</span>\r\n        <span className=\"high-score\"> High score: {props.highScore}</span>\r\n        </div>\r\n    )\r\n}\r\nexport default Title;","function shuffle(array) {\r\n    return array.sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  export default shuffle;","import React, { Component } from \"react\";\nimport ClickCard from \"./components/clickCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/title\";\nimport possibleFriends from \"./possibleFriends.json\";\nimport shuffle from \"./friendSorter\";\n\n\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    unchosenFriends: possibleFriends,\n    score:0,\n    highScore: 0\n  };\n\n  clickCard = id => {\n    console.log(id);\n    const origFriendLength = this.state.unchosenFriends.length;\n    const friendsRemaining = this.state.unchosenFriends.filter(friend=>friend.id !== id);\n    const newFriendLength = friendsRemaining.length\n    const currentHighScore = this.state.highScore;\n    console.log(origFriendLength, newFriendLength);\n    if (origFriendLength !== newFriendLength){\n      if (this.state.score >= currentHighScore){ \n    this.setState({\n      unchosenFriends: friendsRemaining,\n      score: this.state.score + 1,\n      highScore: (currentHighScore + 1)\n    })\n  } else {\n    this.setState({\n      unchosenFriends: friendsRemaining,\n      score: this.state.score + 1\n    })\n  } \n  }else if (origFriendLength === newFriendLength){\n    alert('you have lost');\n    this.setState({\n      unchosenFriends: possibleFriends,\n      score: 0\n    })\n\n  }\n\n  };\n \n\n  render() {\n    let shuffledFriends = shuffle(possibleFriends);\n    return (\n      <Wrapper>\n        <Title name= \"Clicky Game\" score={this.state.score} highScore = {this.state.highScore}>Clicky Game</Title>\n        {shuffledFriends.map(friend =>(\n          <ClickCard key = {friend.id} id={friend.id} name = {friend.name} image = {friend.image} onClick = {this.clickCard}>\n\n          </ClickCard>\n        ))}\n        {/* {this.state.friends.map(friend => (\n          <FriendCard\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))} */}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}